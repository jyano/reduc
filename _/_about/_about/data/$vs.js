$vs = {}
$vs.expl = [[0, 100], [-100, 0], [0, -100], [100, 0]]
$vs = {}
$vs.expl = [[0, 100], [-100, 0], [0, -100], [100, 0]]
$vs.witch = [[[-40, -20], [0, -100], [50, 25]]]
$vs.CoolPlat = [['g', 50, 200], ['o', 200, 50], ['r', 100, 100]]
turtle = [
	['g', [0, 0], [-50, -10], [-40, -20], [0, -40], [20, -10]],
	['y', [10, -10], [20, -30], [50, -15], [45, -5]],
	['y', [-50, 10], [-50, -10], [-40, -10], [-40, 10]],
	['y', [-10, 10], [-10, -10], [0, -10], [0, 10]],
	['x', 10, 55, -12],
	['u', 30, 40, 75, -12]
]
MEETS = function () {
	W()
	//pol
	w.D(200, 300).pol({
		v: [[0, 100], [0, -100], [200, -150], [200, 150]],
		c: 'y', C: 'w', l: 5,
		bm: 1
	})
	w.D(800, 300).pol({
		v: [
			[[5, 100], [0, -100], [200, -150], [200, 150]],
			[[-50, 50], [-50, -100], [450, -50], [450, 50]]
		],
		c: 'b', C: 'X',
		bm: 1
	})
	b = w.D(100, 300)
	pf = b.pol({
		s: 1, C: 'y',
		v: [[-200, -100], [0, -200], [100, -100]]
	})
	pfs = b.pol({
		s: 1, C: 'o',
		v: [[-100, 0], [0, -200], [100, 20], [0, -150]]
	})
	cf = b.cir({k: 'cir', r: 100, x: 200, y: -100, d: .2, b: .8, f: 100, C: 'x'})
	rf = b.rec({x: 100, y: 100, w: 10, h: 100, C: 'x'})
	//turtle
	turtle = [
		['g', [0, 0], [-50, -10], [-40, -20], [0, -40], [20, -10]],
		['y', [10, -10], [20, -30], [50, -15], [45, -5]],
		['y', [-50, 10], [-50, -10], [-40, -10], [-40, 10]],
		['y', [-10, 10], [-10, -10], [0, -10], [0, 10]],
		['x', 10, 55, -12],
		['u', 30, 40, 75, -12]]
	w.D(400, 280, turtle, '-')  //this changes the data object for future uses !!!
	w.D(600, 280, [
		['g', [0, 0], [-50, -10], [-40, -20], [0, -40], [20, -10]],
		['y', [10, -10], [20, -30], [50, -15], [45, -5]],
		['y', [-50, 10], [-50, -10], [-40, -10], [-40, 10]],
		['y', [-10, 10], [-10, -10], [0, -10], [0, 10]],
		['x', 10, 55, -12, '-'],
		['u', 30, 40, 75, -12, '-']])
}
TURTS = function () {
	W()
	//pol
	w.D(200, 300).pol({
		v: [[0, 100], [0, -100], [200, -150], [200, 150]],
		c: 'y', C: 'w', l: 5,
		bm: 1
	})
	w.D(800, 300).pol({
		v: [
			[[5, 100], [0, -100], [200, -150], [200, 150]],
			[[-50, 50], [-50, -100], [450, -50], [450, 50]]
		],
		c: 'b', C: 'X',
		bm: 1
	})
	b = w.D(100, 300)
	pf = b.pol({
		s: 1, C: 'y',
		v: [[-200, -100], [0, -200], [100, -100]]
	})
	pfs = b.pol({
		s: 1, C: 'o',
		v: [[-100, 0], [0, -200], [100, 20], [0, -150]]
	})
	cf = b.cir({k: 'cir', r: 100, x: 200, y: -100, d: .2, b: .8, f: 100, C: 'x'})
	rf = b.rec({x: 100, y: 100, w: 10, h: 100, C: 'x'})
	//turtle
	turtle = [
		['g', [0, 0], [-50, -10], [-40, -20], [0, -40], [20, -10]],
		['y', [10, -10], [20, -30], [50, -15], [45, -5]],
		['y', [-50, 10], [-50, -10], [-40, -10], [-40, 10]],
		['y', [-10, 10], [-10, -10], [0, -10], [0, 10]],
		['x', 10, 55, -12],
		['u', 30, 40, 75, -12]]
	w.D(400, 280, turtle, '-')  //this changes the data object for future uses !!!
	w.D(600, 280, [
		['g', [0, 0], [-50, -10], [-40, -20], [0, -40], [20, -10]],
		['y', [10, -10], [20, -30], [50, -15], [45, -5]],
		['y', [-50, 10], [-50, -10], [-40, -10], [-40, 10]],
		['y', [-10, 10], [-10, -10], [0, -10], [0, 10]],
		['x', 10, 55, -12, '-'],
		['u', 30, 40, 75, -12, '-']])
}
turtle = [
	['g', [0, 0], [-50, -10], [-40, -20], [0, -40], [20, -10]],
	['y', [10, -10], [20, -30], [50, -15], [45, -5]],
	['y', [-50, 10], [-50, -10], [-40, -10], [-40, 10]],
	['y', [-10, 10], [-10, -10], [0, -10], [0, 10]],
	['x', 10, 55, -12],
	['u', 30, 40, 75, -12]
]
TURTS = function () {
	W([1200, 600, 2400, 600], {g: 10})
	turtle = [
		['g', [0, 0], [-50, -10], [-40, -20], [0, -40], [20, -10]],
		['y', [10, -10], [20, -30], [50, -15], [45, -5]],
		['y', [-50, 10], [-50, -10], [-40, -10], [-40, 10]],
		['y', [-10, 10], [-10, -10], [0, -10], [0, 10]],
		['x', 10, 55, -12],
		['u', 30, 40, 75, -12]
	]
	w.D(400, 280, turtle, '-')  //this changes the data object for future uses !!!
	w.D(600, 280, [
		['g', [0, 0], [-50, -10], [-40, -20], [0, -40], [20, -10]],
		['y', [10, -10], [20, -30], [50, -15], [45, -5]],
		['y', [-50, 10], [-50, -10], [-40, -10], [-40, 10]],
		['y', [-10, 10], [-10, -10], [0, -10], [0, 10]],
		['x', 10, 55, -12, '-'],
		['u', 30, 40, 75, -12, '-']
	])
	w.D(600, 280, [
		['g', [0, 0], [-50, -10], [-40, -20], [0, -40], [20, -10]],
		['y', [10, -10], [20, -30], [50, -15], [45, -5]],
		['y', [-50, 10], [-50, -10], [-40, -10], [-40, 10]],
		['y', [-10, 10], [-10, -10], [0, -10], [0, 10]],
		['x', 10, 55, -12, '-']
	])
	w.D(600, 280, [
		['x', 300, 20],
		['u', 30, 40, '-'],
		['p', 40, 10, 10]
	])
}
PITFALL = function () {
	b2d.levelScrollX()
	turtle = [
		['green', [0, 0], [-50, -10], [-40, -20], [0, -40], [20, -10]]
		, ['yellow', [10, -10], [20, -30], [50, -15], [45, -5]]
		, ['yellow',
			[-50, 10], [-50, -10], [-40, -10], [-40, 10]
		]
		, ['yellow',
			[-10, 10], [-10, -10], [0, -10], [0, 10]
		]
	]
	turtle2 = [
		['green', [0, 0], [-50, -10], [-40, -20], [0, -40], [20, -10]]
		, ['yellow', [-60, -30], [-50, -60], [-20, -45], [-15, -35]]
		, ['yellow',
			[-50, 10], [-50, -10], [-40, -10], [-40, 10]
		]
		, ['yellow',
			[-10, 10], [-10, -10], [0, -10], [0, 10]
		]
	]
	t = w.vertsKin(400, 280, turtle).fixedRot(true)
	t2 = w.vertsKin(700, 280, turtle2).fixedRot(true)
	setInterval(function () {
		t2.linVel(5, 0)
		setTimeout(function () {
			t2.linVel(-5, 0)
		}, 1000)
	}, 2000)
}
ob.turtles = function () {
	w.P()
	// y.thr()
	//turtle
	w.D(600, 280, [
		['b', 700, 40, 0, -100],
		['g', [0, 0], [-50, -10], [-40, -20], [0, -40], [20, -10]],
		['y', [10, -10], [20, -30], [50, -15], [45, -5]],
		['y', [-50, 10], [-50, -10], [-40, -10], [-40, 10]],
		['y', [-10, 10], [-10, -10], [0, -10], [0, 10]]
	])
	//, ['x', 10, 55,-12, '-'], ['u', 30,40, 75,-12 ,'-']
	w.verts = function (x, y, arrs) {
		var w = this
		var b = w.D(x, y)
		_.e(arrs, function (f) {
			b.pol(f)
		})
		return b
	}
	w.verts(400, 280, turtle)
	w.vertsKin = function (x, y, arrs) {
		var w = this,
				b = w.S(x, y)//Kin
		_.e(arrs, function (g) {
			b.pol(g[0], _.r(g))
		})
		return b
	}
	p.track()
	t = w.vertsKin(400, 570, turtle).fR()
	t2 = w.vertsKin(700, 570, turtle2)
	_.ev(1, function () {
		//t2.lV(5,0)
		_.in(1, function () {
			$l('ok')
			// p.lV(-500,500)
			p.I(-5000, 500)
		})
	})
}
polData()
function polData() {
	turtle2 = [['green', [0, 0], [-50, -10], [-40, -20], [0, -40], [20, -10]], ['yellow', [-60, -30], [-50, -60], [-20, -45], [-15, -35]], ['yellow', [-50, 10], [-50, -10], [-40, -10], [-40, 10]], ['yellow', [-10, 10], [-10, -10], [0, -10], [0, 10]]]
	dick = [
		[50, 300, 0, -100],
		[50, 100, 150],
		[50, -100, 150]
	]
	guyInBed = [
		[30],
		[20, 30, 30],
		[100, 30]
	]
	cjs.somePolyFixt = [
		[
			[-100, 0], [0, -100],
			[100, 0], [60, 50]]]
	cjs.compoundShape = [
		[50, 10],
		[60, 30, 0, 0, 40],
		[120, 30, 0, 0, 29],
		[60, 10, 0, 50, 60],
		[84, 10, 15, 80, -120]
	]
	cjs.compoundShape2 = [
		[50, 10],
		[20, 20],
		[20, 10, 0, 0, 10],
		[40, 10, 50, 0, 45],
		[84, 10, 15, 80, -120],
		[60, 10, 0, 50, 60]
	]
	cjs.compoundStar = [
		[10, 10],
		[20],
		[4, 80, 10, 30, 135],
		[4, 80, 0, 0, 45],
		[4, 80, 100, 0, 90],
		[4, 80, 0, 0, 180]
	]
	v1 = [[-100, 0], [0, -100], [100, -50], [0, -50]]
	turtle = [
		['green', [0, 0], [-50, -10], [-40, -20], [0, -40], [20, -10]]
		, ['yellow', [10, -10], [20, -30], [50, -15], [45, -5]]
		, ['yellow',
			[-50, 10], [-50, -10], [-40, -10], [-40, 10]
		]
		, ['yellow',
			[-10, 10], [-10, -10], [0, -10], [0, 10]
		]
	]
	pin = [
		['o', [-20, 20], [0, -80], [20, 20], [0, -40]],
		['w', 8, 0, -75],
		['w', 8, -20, 20],
		['w', 8, 20, 20]
	]
	p1 = [[-50, 50], [-50, -50], [50, -50], [50, 50]]
	p2 = [[-100, 0], [-100, -100], [0, -100], [0, 0], [-98, 2]]
	vs1 = [
		[61, 68],
		[145, 122],
		[186, 94],
		[224, 135],
		[204, 211],
		[105, 200],
		[141, 163],
		[48, 139],
		[74, 117]
	]
}
TURTS = function () {
	W([1200, 600, 2400, 600], {g: 10})
	turtle = [
		['g', [0, 0], [-50, -10], [-40, -20], [0, -40], [20, -10]],
		['y', [10, -10], [20, -30], [50, -15], [45, -5]],
		['y', [-50, 10], [-50, -10], [-40, -10], [-40, 10]],
		['y', [-10, 10], [-10, -10], [0, -10], [0, 10]],
		['x', 10, 55, -12],
		['u', 30, 40, 75, -12]
	]
	w.D(400, 280, turtle, '-')  //this changes the data object for future uses !!!
	w.D(600, 280, [
		['g', [0, 0], [-50, -10], [-40, -20], [0, -40], [20, -10]],
		['y', [10, -10], [20, -30], [50, -15], [45, -5]],
		['y', [-50, 10], [-50, -10], [-40, -10], [-40, 10]],
		['y', [-10, 10], [-10, -10], [0, -10], [0, 10]],
		['x', 10, 55, -12, '-'],
		['u', 30, 40, 75, -12, '-']
	])
	w.D(600, 280, [
		['g', [0, 0], [-50, -10], [-40, -20], [0, -40], [20, -10]],
		['y', [10, -10], [20, -30], [50, -15], [45, -5]],
		['y', [-50, 10], [-50, -10], [-40, -10], [-40, 10]],
		['y', [-10, 10], [-10, -10], [0, -10], [0, 10]],
		['x', 10, 55, -12, '-']
	])
	w.D(600, 280, [
		['x', 300, 20],
		['u', 30, 40, '-'],
		['p', 40, 10, 10]
	])
}
TURTS = function () {
	W([1200, 600, 2000, 600], {}).P().Y()
	// y.thr()
	//turtle
	w.D(600, 280, [
		['b', 700, 40, 0, -100],
		['g', [0, 0], [-50, -10], [-40, -20], [0, -40], [20, -10]],
		['y', [10, -10], [20, -30], [50, -15], [45, -5]],
		['y', [-50, 10], [-50, -10], [-40, -10], [-40, 10]],
		['y', [-10, 10], [-10, -10], [0, -10], [0, 10]]
	])
	//, ['x', 10, 55,-12, '-'], ['u', 30,40, 75,-12 ,'-']
	w.verts = function (x, y, arrs) {
		var w = this
		var b = w.D(x, y)
		_.e(arrs, function (f) {
			b.pol(f)
		})
		return b
	}
	w.verts(400, 280, turtle)
	w.vertsKin = function (x, y, arrs) {
		var w = this,
				b = w.S(x, y)//Kin
		_.e(arrs, function (g) {
			b.pol(g[0], _.r(g))
		})
		return b
	}
	p.track()
	t = w.vertsKin(400, 570, turtle).fR()
	t2 = w.vertsKin(700, 570, turtle2)
	_.ev(1, function () {
		//t2.lV(5,0)
		_.in(1, function () {
			$l('ok')
			// p.lV(-500,500)
			p.I(-5000, 500)
		})
	})
}
turtle2 = [['green', [0, 0], [-50, -10], [-40, -20], [0, -40], [20, -10]], ['yellow', [-60, -30], [-50, -60], [-20, -45], [-15, -35]], ['yellow', [-50, 10], [-50, -10], [-40, -10], [-40, 10]], ['yellow', [-10, 10], [-10, -10], [0, -10], [0, 10]]]
verts = [[-100, 0], [0, -100], [100, -20], [50, 20]]
guyInBed = [[30], [20, 30, 30], [100, 30]]
dick = [[50, 300, 0, -100], [50, 100, 150], [50, -100, 150]] //[b2d.poly(50, 300, 0,-100), b2d.circ(50, 100, 150), b2d.circ(50, -100, 150)]
dick = [
	[50, 300, 0, -100],
	[50, 100, 150],
	[50, -100, 150]
]
guyInBed = [
	[30],
	[20, 30, 30],
	[100, 30]
]
sqr = [[-50, 50], [-50, -50], [50, -50], [50, 50]]
combo = [[-100, 0], [-100, -100], [0, -100], [0, 0], [-98, 2]]
flatTri = [[400, 0], [800, 100], [120, 120]]
vs1 = [
	[61, 68],
	[145, 122],
	[186, 94],
	[224, 135],
	[204, 211],
	[105, 200],
	[141, 163],
	[48, 139],
	[74, 117]
];
vs2 = [
	[131, 84],
	[224, 110],
	[174, 180],
	[120, 136],
	[60, 167],
];
vs3 = [
	[190, 140],
	[170, 180],
	[160, 160]
]
vs4 = [
	[131, 84], [224, 110], [174, 280], [120, 136], [60, 167],
]
tictactoe = [
	[[200, 0], [200, 600]],
	[[400, 0], [400, 600]],
	[[0, 200], [600, 200]],
	[[0, 400], [600, 400]]
]
sh1 = [[10, 0], [19, 19], [10, 9], [9, 9], [0, 19], [9, 0]]
sh2 = [[[10, 0], [19, 19], [10, 9], [9, 9], [0, 19], [9, 0]], [[8, 13], [12, 13]], [[9, 14], [9, 18]], [[10, 14], [10, 18]]]
v = [[-100, 0], [0, -100], [100, 50]]
vs = [
	[[-100, 0], [0, -100], [100, 50]],
	[[-200, 0], [-100, -100], [0, 50]],
	[[0, 200], [0, -200], [400, -300], [400, 300]]
]
vs1 = [
	[61, 68],
	[145, 122],
	[186, 94],
	[224, 135],
	[204, 211],
	[105, 200],
	[141, 163],
	[48, 139],
	[74, 117]
];
vs2 = [
	[131, 84],
	[224, 110],
	[174, 180],
	[120, 136],
	[60, 167],
];
v1 = [[-100, 0], [0, -100], [100, -50], [0, -50]]
turtle = [
	['green', [0, 0], [-50, -10], [-40, -20], [0, -40], [20, -10]]
	, ['yellow', [10, -10], [20, -30], [50, -15], [45, -5]]
	, ['yellow',
		[-50, 10], [-50, -10], [-40, -10], [-40, 10]
	]
	, ['yellow',
		[-10, 10], [-10, -10], [0, -10], [0, 10]
	]
]
pin = [
	['o', [-20, 20], [0, -80], [20, 20], [0, -40]],
	['w', 8, 0, -75],
	['w', 8, -20, 20],
	['w', 8, 20, 20]
]
p1 = [[-50, 50], [-50, -50], [50, -50], [50, 50]]
p2 = [[-100, 0], [-100, -100], [0, -100], [0, 0], [-98, 2]]
vs1 = [
	[61, 68],
	[145, 122],
	[186, 94],
	[224, 135],
	[204, 211],
	[105, 200],
	[141, 163],
	[48, 139],
	[74, 117]
]
MEET = function () {
	W([1200, 600, 1800, 600], {g: 10})
	y2 = w.y(100, 300).C('x').rot(180)
	t = ter = w.S(500, 300, 'g', 200, 800).cl(function (buF) {
		var bu = buF.B(), xy = bu.XY()
		bu.kill()
		pol = gpc.p($vs.expl).ger(xy)
		t.fs(function (f) {
			f.sub(pol)
		})
		t.C('r')
	})
	//alt way to handle explosion sub
	//w.rad(bulletX, bulletY, 15, function (terrainFxt) {terrainFxt.sub( explosionPol )})
}
MEET = function () {
	W([1200, 600, 1800, 600], {g: 10})
	y2 = w.y(100, 300).C('x').rot(180)
	t = ter = w.S(500, 300, 'g', 200, 800).cl(function (buF) {
		var bu = buF.B(), xy = bu.XY()
		bu.kill()
		pol = gpc.p($vs.expl).ger(xy)
		t.fs(function (f) {
			f.sub(pol)
		})
		t.C('r')
	})
	//alt way to handle explosion sub
	//w.rad(bulletX, bulletY, 15, function (terrainFxt) {terrainFxt.sub( explosionPol )})
}
$pol = $poly = function (pD, xy) {
	pD = S(pD) ? $vs[pD] : pD
	return $pD(pD).maybeTl(xy)
}
$pol = $poly = function (poly, xy) {
	return $pD(S(poly) ? $vs[poly] : poly).maybeHere(xy)
}
U2 = function () {
	W(0).D(800, 350).pol({c: 'y', v: w.S(1000, 300, $vs.CoolPlat).uni()})
	w.D(300, 390).pol({c: 'y', v: w.S(300, 100, $vs.CoolPlat).uni()})
}
U3 = function () {
	W().G(1000).roof.kill()
	RED = w.S(100, 400, 'r', $vs.witch).f()
	d = w.D(350, 400)
	d.pol(RED.uni(w.S(100, 340, 'y', 50, 50).f()))
	d.pol(RED.uni(w.S(150, 420, 'o', 50, 50).f()))
}